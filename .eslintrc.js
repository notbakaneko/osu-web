/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
  "env": {
      "browser": true,
      "es6": true
  },
  "extends": [
      "eslint:recommended",
      "plugin:@typescript-eslint/recommended",
      "plugin:@typescript-eslint/recommended-requiring-type-checking",
      "plugin:react/recommended",
      "plugin:react-hooks/recommended",
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
      "project": "tsconfig.json",
      "sourceType": "module"
  },
  "plugins": [
      "eslint-plugin-jsdoc",
      "eslint-plugin-import",
      "eslint-plugin-react",
      "@typescript-eslint",
      "@typescript-eslint/tslint"
  ],
  "rules": {
      "@typescript-eslint/array-type": [
          "error",
          {
              "default": "array"
          }
      ],
      "@typescript-eslint/consistent-type-assertions": "error",
      "@typescript-eslint/consistent-type-definitions": "error",
      "@typescript-eslint/dot-notation": "error",
      "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
              "accessibility": "no-public"
          }
      ],
      "@typescript-eslint/explicit-module-boundary-types": "off",
      "@typescript-eslint/indent": [
          "error",
          2,
          {
              "FunctionDeclaration": {
                  "parameters": "first"
              },
              "FunctionExpression": {
                  "parameters": "first"
              },
              "SwitchCase": 1
          }
      ],
      "@typescript-eslint/member-delimiter-style": [
          "error",
          {
              "multiline": {
                  "delimiter": "semi",
                  "requireLast": true
              },
              "singleline": {
                  "delimiter": "semi",
                  "requireLast": false
              }
          }
      ],
      "@typescript-eslint/member-ordering": [
        "error",
        {
          "default": [
            "public-static-field",
            "protected-static-field",
            "private-static-field",

            "public-instance-field",
            "protected-instance-field",
            "private-instance-field",

            "public-constructor",
            "protected-constructor",
            "private-constructor",

            "public-static-method",
            "protected-static-method",
            "private-static-method",

            "public-instance-method",
            "protected-instance-method",
            "private-instance-method"
          ]
        }
      ],
      "@typescript-eslint/naming-convention": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-parameter-properties": "off",
      "@typescript-eslint/no-unsafe-assignment": "warn",
      "@typescript-eslint/no-unsafe-call": "warn",
      "@typescript-eslint/no-unsafe-member-access": "warn",
      "@typescript-eslint/no-unsafe-return": "warn",
      "@typescript-eslint/no-unused-expressions": "error",
      "@typescript-eslint/no-use-before-define": "off",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-function-type": "error",
      "@typescript-eslint/quotes": [
          "error",
          "single",
          { "avoidEscape": true },
      ],
      "@typescript-eslint/restrict-template-expressions": [
        "error",
        {
          allowNumber: true,
          allowBoolean: true,
          allowAny: false,
          allowNullish: true,
        }
      ],
      "@typescript-eslint/semi": [
          "error",
          "always"
      ],
      "@typescript-eslint/tslint/config": [
          "error",
          {
              "rules": {
                  "import-spacing": true,
                  "jsx-alignment": true,
                  "jsx-no-lambda": true,
                  "jsx-no-string-ref": true,
                  "jsx-self-close": true,
                  "object-literal-sort-keys": true,
                  "whitespace": true
              }
          }
      ],
      "@typescript-eslint/type-annotation-spacing": "error",
      "@typescript-eslint/unbound-method": "warn", // TODO: some calls are intentionally unbounded...
      "@typescript-eslint/unified-signatures": "error",
      "arrow-body-style": "error",
      "arrow-parens": [
          "error",
          "always"
      ],
      "brace-style": [
          "error",
          "1tbs"
      ],
      "comma-dangle": [
          "error",
          "always-multiline"
      ],
      "complexity": "off",
      "curly": [
          "error",
          "multi-line"
      ],
      "eol-last": "error",
      "eqeqeq": [
          "error",
          "smart"
      ],
      "guard-for-in": "error",
      "id-blacklist": [
          "error",
          "any",
          "Number",
          "number",
          "String",
          "string",
          "Boolean",
          "boolean",
          "Undefined",
          "undefined"
      ],
      "id-match": "error",
      "import/order": "error",
      "jsdoc/check-alignment": "error",
      "jsdoc/check-indentation": "error",
      "jsdoc/newline-after-description": "error",
      "max-classes-per-file": [
          "error",
          1
      ],
      "max-len": "off",
      "new-parens": "error",
      "no-bitwise": "error",
      "no-caller": "error",
      "no-console": "warn",
      "no-eval": "error",
      "no-fallthrough": "off",
      "no-invalid-this": "off",
      "no-multiple-empty-lines": "error",
      "no-new-wrappers": "error",
      "no-shadow": [
          "error",
          {
              "hoist": "all"
          }
      ],
      "no-throw-literal": "error",
      "no-trailing-spaces": "error",
      "no-undef-init": "error",
      "no-underscore-dangle": "error",
      "no-unsafe-finally": "error",
      "object-shorthand": "error",
      "one-var": [
          "error",
          "never"
      ],
      "quote-props": [
          "error",
          "consistent-as-needed"
      ],
      "radix": "error",
      "react/jsx-boolean-value": "error",
      "react/jsx-curly-spacing": [
          "error",
          {
              "when": "never"
          }
      ],
      "react/no-deprecated": "warn",
      "react/jsx-equals-spacing": [
          "error",
          "never"
      ],
      "react/jsx-no-bind": "error",
      "react/jsx-wrap-multilines": "error",
      "react/no-unsafe": "off",
      "react-hooks/exhaustive-deps": "error",
      "space-before-function-paren": [
          "error",
          {
              "anonymous": "never",
              "asyncArrow": "always",
              "named": "never"
          }
      ],
      "spaced-comment": [
          "error",
          "always",
          {
              "markers": [
                  "/"
              ]
          }
      ],
  }
};
